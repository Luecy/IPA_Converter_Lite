;(() => {
	"use strict";
	
	//このライブラリが定義するグローバル変数の名前
	const propName = "convertXsampaToIpa.js";
	
	//グローバル変数の競合を判定
	if (self.hasOwnProperty(propName) === true) {
		throw new Error(`[self.${propName}] is in conflict`);
	}
	
	//変換のリスト
	const list = new Map([
		[/_T\\/g, "\u030b"],
		[/_H\\/g, "\u0301"],
		[/_M\\/g, "\u0304"],
		[/_L\\/g, "\u0300"],
		[/_B\\/g, "\u030f"],
		[/_R/g, "\u030c"],
		[/_F/g, "\u0302"],
		[/_r\\/g, "\u02d4"],
		[/_h\\/g, "\u02b1"],
		[/b_</g, "\u0253"],
		[/d`/g, "\u0256"],
		[/d\\/g, "\u0221"],
		[/d_</g, "\u0257"],
		[/g_</g, "\u0260"],
		[/h\\/g, "\u0266"],
		[/j\\/g, "\u029d"],
		[/l`/g, "\u026d"],
		[/l\\/g, "\u027a"],
		[/n`/g, "\u0273"],
		[/n\\/g, "\u0235"],
		[/p\\/g, "\u0278"],
		[/r\\`/g, "\u027b"],
		[/r\\/g, "\u0279"],
		[/s`/g, "\u0282"],
		[/s\\/g, "\u0255"],
		[/t`/g, "\u0288"],
		[/t\\/g, "\u0236"],
		[/v\\/g, "\u028b"],
		[/x\\/g, "\u0267"],
		[/z`/g, "\u0290"],
		[/z\\/g, "\u0291"],
		[/B\\/g, "\u0299"],
		[/G\\_</g, "\u029b"],
		[/G\\/g, "\u0262"],
		[/H\\/g, "\u029c"],
		[/I\\/g, "\u1d7b"],
		[/J\\_</g, "\u0284"],
		[/J\\/g, "\u025f"],
		[/K\\/g, "\u026e"],
		[/L\\/g, "\u029f"],
		[/M\\/g, "\u0270"],
		[/N\\/g, "\u0274"],
		[/O\\/g, "\u0298"],
		[/R\\/g, "\u0280"],
		[/U\\/g, "\u1d7f"],
		[/V\\/g, "\u2c71"],
		[/X\\/g, "\u0127"],
		[/_"/g, "\u0308"],
		[/_\u002b\\/g, "\u02d6"],
		[/_\u002b/g, "\u031f"],
		[/_-\\/g, "\u02d7"],
		[/_-/g, "\u0320"],
		[/_0\\/g, "\u030a"],
		[/_0/g, "\u0325"],
		[/_>/g, "\u02bc"],
		[/_\u003f\\/g, "\u02e4"],
		[/_\u005e/g, "\u032f"],
		[/_}/g, "\u031a"],
		[/_=\\/g, "\u02ed"],
		[/_=/g, "\u030d"],
		[/_~/g, "\u0303"],
		[/_\u002f/g, "\u030c"],
		[/_\\/g, "\u0302"],
		[/_A/g, "\u0318"],
		[/_a/g, "\u033a"],
		[/_B/g, "\u02e9"],
		[/_c/g, "\u031c"],
		[/_d/g, "\u032a"],
		[/_e/g, "\u0334"],
		[/<F>/g, "\u2198"],
		[/_G/g, "\u02e0"],
		[/_H/g, "\u02e6"],
		[/_h/g, "\u02b0"],
		[/_j/g, "\u02b2"],
		[/_k/g, "\u0330"],
		[/_L/g, "\u02e8"],
		[/_l/g, "\u02e1"],
		[/_M/g, "\u02e7"],
		[/_m/g, "\u033b"],
		[/_N/g, "\u033c"],
		[/_n/g, "\u207f"],
		[/_O/g, "\u0339"],
		[/_o\\/g, "\u02d5"],
		[/_o/g, "\u031e"],
		[/_q/g, "\u0319"],
		[/<R>/g, "\u2197"],
		[/_r/g, "\u031d"],
		[/_T/g, "\u02e5"],
		[/_t/g, "\u0324"],
		[/_v/g, "\u032c"],
		[/_w/g, "\u02b7"],
		[/_X/g, "\u0306"],
		[/_x/g, "\u033d"],
		[/3\\/g, "\u025e"],
		[/3`/g, "\u025d"],
		[/5\\/g, "\u0234"],
		[/r`/g, "\u027d"],
		[/<\\/g, "\u02a2"],
		[/>\\/g, "\u02a1"],
		[/\u003f\\/g, "\u0295"],
		[/@\\/g, "\u0258"],
		[/@`/g, "\u025a"],
		[/!\\/g, "\u01c3"],
		[/\u007c\\\u007c\\/g, "\u01c1"],
		[/\u007c\\/g, "\u01c0"],
		[/\u007c\u007c/g, "\u2016"],
		[/=\\/g, "\u01c2"],
		[/:\\/g, "\u02d1"],
		[/-\\/g, "\u203f"],
		[/A/g, "\u0251"],
		[/B/g, "\u03b2"],
		[/C/g, "\u00e7"],
		[/D/g, "\u00f0"],
		[/E/g, "\u025b"],
		[/F/g, "\u0271"],
		[/G/g, "\u0263"],
		[/g/g, "\u0261"],
		[/H/g, "\u0265"],
		[/I/g, "\u026a"],
		[/J/g, "\u0272"],
		[/K/g, "\u026c"],
		[/L/g, "\u028e"],
		[/M/g, "\u026f"],
		[/N/g, "\u014b"],
		[/O/g, "\u0254"],
		[/P/g, "\u028b"],
		[/Q/g, "\u0252"],
		[/R/g, "\u0281"],
		[/S/g, "\u0283"],
		[/T/g, "\u03b8"],
		[/U/g, "\u028a"],
		[/V/g, "\u028c"],
		[/W/g, "\u028d"],
		[/X/g, "\u03c7"],
		[/Y/g, "\u028f"],
		[/Z/g, "\u0292"],
		[/&/g, "\u0276"],
		[/{/g, "\u00e6"],
		[/}/g, "\u0289"],
		[/\u00e6\\/g, "{"],
		[/\u0289\\/g, "}"],
		[/1/g, "\u0268"],
		[/2/g, "\u00f8"],
		[/3/g, "\u025c"],
		[/4/g, "\u027e"],
		[/5/g, "\u026b"],
		[/6/g, "\u0250"],
		[/7/g, "\u0264"],
		[/8/g, "\u0275"],
		[/9/g, "\u0153"],
		[/\u003f/g, "\u0294"],
		[/@/g, "\u0259"],
		[/"/g, "\u02c8"],
		[/%/g, "\u02cc"],
		[/:/g, "\u02d0"],
		[/\u005e/g, "\ua71b"],
		[/!/g, "\ua71c"],
		[/=/g, "\u0329"],
		[/`/g, "\u02de"],
		[/~/g, "\u0303"],
		[/'/g, "\u02b2"],
		[/-/g, "\u0361"]
	]);
	
	//関数の定義
	const convertXsampaToIpa = str => {
		for (const i of list) {
			str = str.replace(i[0], i[1]);
		}
		return str;
	};
	
	//グローバル変数の定義
	self[propName] = Object.preventExtensions({
		convertXsampaToIpa
	});
	Object.defineProperty(self[propName], "convertXsampaToIpa", {writable: false});
	
	//グローバル変数の再代入を無効に
	Object.defineProperty(self, propName, {writable: false, configurable: false});
	
})``;
