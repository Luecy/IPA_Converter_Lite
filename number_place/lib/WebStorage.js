(()=>{"use strict";let t="WebStorage";if(!0===self.hasOwnProperty(t))throw Error(`[self.${t}] is in conflict`);let e=(()=>{let t=class{static #a=new Set;group;storage;constructor(e="",r="localStorage"){this.group=(()=>{if(""===(e=String(e))&&(e=`${t.#a.size}_`),t.#a.has(e))throw Error("[WebStorage.group] is in conflict");return t.#a.add(e),e})``,this.storage=(()=>{"sessionStorage"!==r&&(r="localStorage");try{return self[r]}catch{return null}})``,Object.defineProperty(this,"group",{configurable:!1,writable:!1}),Object.defineProperty(this,"storage",{configurable:!1,writable:!1})}set(t,e){t=this.group+String(t),e=String(e);try{this.storage.setItem(t,e)}catch{return null}}get(t){t=this.group+String(t);try{return this.storage.getItem(t)}catch{return null}}remove(t){t=this.group+String(t);try{this.storage.removeItem(t)}catch{return null}}getKeys(t=!0){let e=[];try{let r=RegExp(`^${this.group}`),s=0;for(let o=0;o<this.storage.length;o++)if(this.storage.key(o).match(r)){let l=this.storage.key(o);!0===t&&(l=l.replace(r,"")),e[s++]=l}}catch{return null}return e}clear(){for(let t of this.getKeys(!1))try{this.storage.removeItem(t)}catch{return null}}get length(){try{return this.getKeys(!1).length}catch{return null}}};return Object.freeze(t)})``;self[t]=e,Object.defineProperty(self,t,{writable:!1,configurable:!1})})``;